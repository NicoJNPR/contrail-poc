
image_path=/opt/vm-image
instance_path=/var/lib/libvirt/instance

virsh pool-info lv 2>&1 > /dev/null
if (( $?  )); then
    # No pool 'lv', use the new name.
    volume_pool=poc
else
    # Pool 'lv' is already created, stay with it.
    volume_pool=lv
fi

image_cirros=cirros-0.4.0-x86_64-disk.img
image_centos=CentOS-7-x86_64-GenericCloud-1805.qcow2
image_vqfx_re=vqfx-re-18.1r1.9.qcow2
image_vqfx_pfe=vqfx-pfe.qcow2
image_vmx_re=vmx-re-18.3r1.9.qcow2
image_vmx_re_hdd=vmx-re-hdd.qcow2
image_vmx_re_usb=metadata-usb-re.img
image_vmx_pfe=vFPC-20180829.img

source poc.conf
source role
source inventory
source utils/vm.func
source hypervisor/hypervisor.func
source underlay/$poc_underlay.func
source cluster/$poc_cluster/$poc_cluster.func


get_host_os()
{
    cat /etc/os-release | awk -F \" "/^NAME/"'{print $2}'
}

host_os=$(get_host_os)

create_bridge_centos()
{
    local name=$1
    local output

    ip -br link show dev $name > /dev/null 2>&1
    if (( $? == 0 )); then
        return
    fi

    echo "Create bridge $name..."
    brctl addbr $name
    ip link set dev $name up
    cat << __EOF__ > /etc/sysconfig/network-scripts/ifcfg-$name
DEVICE=$name
TYPE=Bridge
ONBOOT=yes
NM_CONTROLLED=no
BOOTPROTO=static
IPADDR=10.6.8.254
NETMASK=255.255.255.0
__EOF__
    if [ "$name" == "br-int" ]; then
    ip addr add 10.6.8.254/24 dev $name
    cat << __EOF__ >> /etc/sysconfig/network-scripts/ifcfg-$name
BOOTPROTO=static
IPADDR=10.6.8.254
NETMASK=255.255.255.0
__EOF__
    elif [ "$name" == "br-r1" ]; then
    ip addr add 10.6.11.100/24 dev $name
    cat << __EOF__ >> /etc/sysconfig/network-scripts/ifcfg-$name
BOOTPROTO=static
IPADDR=10.6.11.100
NETMASK=255.255.255.0
__EOF__
    else
    cat << __EOF__ >> /etc/sysconfig/network-scripts/ifcfg-$name
BOOTPROTO=none
__EOF__
    fi
}

create_bridge()
{
    local name=$1

    if [ "$host_os" == "CentOS Linux" ]; then
        create_bridge_centos $name
    elif [ "$host_os" == "Ubuntu" ]; then
        create_bridge_ubuntu $name
    fi
}

delete_bridge_centos()
{
    local name=$1
    local port

    echo "Delete bridge $name..."
    ip -br link show dev $name > /dev/null 2>&1
    if (( $? )); then
        return
    fi
    port=$(brctl show $name | awk "/$name/"'{print $4'})
    if [ "$port" == "" ]; then
        ip link delete $name
        rm -f /etc/sysconfig/network-scripts/ifcfg-$name
    fi
}

delete_bridge()
{
    local name=$1

    if [ "$host_os" == "CentOS Linux" ]; then
        delete_bridge_centos $name
    elif [ "$host_os" == "Ubuntu" ]; then
        delete_bridge_ubuntu $name
    fi
}

create_veth()
{
    local name=$1
    local output
    local a

    echo "Create veth $name..."
    IFS=','; a=(${name}); unset IFS
    ip link add ${a[0]} type veth peer name ${a[1]}
    ip link set dev ${a[0]} up
    ip link set dev ${a[1]} up
}

delete_veth()
{
    local name=$1
    local a

    echo "Delete veth $name..."
    IFS=','; a=(${name}); unset IFS
    ip -br link show dev ${a[0]} > /dev/null 2>&1
    if (( $? == 0 )); then
        ip link delete ${a[0]}
    fi
}

create_underlay_link()
{
    local name

    echo "Create underlay links..."
    for name in $underlay_br_list; do
        create_bridge $name
    done
    for name in $underlay_veth_list; do
        create_veth $name
    done
}

delete_underlay_link()
{
    local name

    echo "Delete underlay links..."
    for name in $underlay_br_list; do
        delete_bridge $name
    done
    for name in $underlay_veth_list; do
        delete_veth $name
    done
}

create_cluster_link()
{
    local name

    echo "Create cluster links..."
    for name in $cluster_br_list; do
        create_bridge $name
    done
}

delete_cluster_link()
{
    local name

    echo "Delete cluster links..."
    for name in $cluster_br_list; do
        delete_bridge $name
    done
}

enable_snat()
{
    local dev
    local cidr
    local addr

    echo "Enable SNAT..."
    # Take the device of default route.
    dev=$(ip route list exact 0/0 | awk '{print $5}')

    iptables -t nat -S | grep $dev > /dev/null 2>&1
    if (( $? )); then
        cidr=$(ip -f inet -br addr show dev $dev | awk '{print $3}')
        IFS='/'; a=(${cidr}); unset IFS
        addr=${a[0]}
        iptables -t nat -A POSTROUTING -o $dev -j SNAT --to $addr
    fi
}

disable_snat()
{
    local args

    echo "Disable SNAT..."
    iptables -t nat -S | grep SNAT > /dev/null 2>&1
    if (( $? == 0 )); then
        args=$(iptables -t nat -S | awk "/SNAT/"'{$1="-D"; print $0}')
        iptables -t nat $args
    fi
}

build_dhcp_conf()
{
    local list
    local arr
    local addr

    echo "Build /etc/dhcp/dhcpd.conf."
    cat << __EOF__ > /etc/dhcp/dhcpd.conf
subnet 10.6.8.0 netmask 255.255.255.0 {
        option routers                  10.6.8.254;
        option subnet-mask              255.255.255.0;
        option broadcast-address        10.6.8.255;

__EOF__

    list=$(virsh list --all | awk "/-re/"'{print $2}')
    for name in $list; do
        mac=$(virsh domiflist $name | awk "/br-int/"'{print $5}')
        arr=(${vm_address_list[$name]})
        addr=${arr[0]}
        cat << __EOF__ >> /etc/dhcp/dhcpd.conf
        host $name {
                hardware ethernet $mac;
                fixed-address $addr;
        }
__EOF__
    done
    echo } >> /etc/dhcp/dhcpd.conf

    echo "Restart DHCP server."
    if [ "$host_os" == "CentOS Linux" ]; then
        systemctl restart dhcpd
    elif [ "$host_os" == "Ubuntu" ]; then
        systemctl restart isc-dhcp-server
    fi
}

update_hosts()
{
    local name=$1

    if [ "$2" == "add" ]; then
        arr=(${vm_address_list[$name]})
        addr=${arr[0]}
        echo "$addr  $name" >> /etc/hosts
    elif [ "$2" == "delete" ]; then
        sed -i -e "/$name/d" /etc/hosts
    fi
}

initialize_vqfx()
{
    local arr=(${vm_address_list[$1-re]})
    local host=${arr[0]}
    local idx
    local sets

    echo "Initialize $1."
#    key_pub=$(cat /root/.ssh/id_rsa.pub)
#    sshpass -p Juniper ssh $host "cli -c 'configure; \
#set system host-name $1; \
#set system root-authentication ssh-rsa \"$key_pub\"; \
#delete interfaces; \
#set interfaces em0 unit 0 family inet address $host/24; \
#set interfaces em1 unit 0 family inet address 169.254.0.2/24; \
#commit'"

    sets="set system host-name $1; \
          delete interfaces; \
          set interfaces em0 unit 0 family inet address $host/24; \
          set interfaces em1 unit 0 family inet address 169.254.0.2/24;"
#    for idx in {0..7}; do
#        mac=$(virsh domiflist $1-re | awk "/-xe$idx/"'{print $5}')
#        if [ $mac ]; then
#            sets+="set interfaces xe-0/0/$idx mac $mac;"
#        fi
#    done
    ssh $host "cli -c 'configure; $sets; commit'"
}

initialize_vmx()
{
    local arr=(${vm_address_list[$1-re]})
    local host=${arr[0]}
    local idx
    local sets

    echo "Initialize $1."
#    key_pub=$(cat /root/.ssh/id_rsa.pub)
#    sshpass -p Juniper ssh $host "cli -c 'configure; \
#set system host-name $1; \
#set system root-authentication ssh-rsa \"$key_pub\"; \
#delete interfaces; \
#set interfaces fxp0 unit 0 family inet address $host/24; \
#commit'"

    sets="set system host-name $1; \
          delete interfaces; \
          set interfaces fxp0 unit 0 family inet address $host/24;"
#    for idx in {0..7}; do
#        mac=$(virsh domiflist $1-pfe | awk "/-ge$idx/"'{print $5}')
#        if [ $mac ]; then
#            sets+="set interfaces ge-0/0/$idx mac $mac;"
#        fi
#    done
    ssh $host "cli -c 'configure; $sets; commit'"
}

add_license_vmx()
{
    local arr=(${vm_address_list[$1-re]})
    local host=${arr[0]}
    local license="E435890758 aeaqic aiagij cpabsc idycyi giydco bqgiyd \
                              sdapoz gvqlkk ovxgs4 dfojcx mylma4 uhfs7p \
                              etdlfc ex2i5k 4mo4fa ew2xbz ujzbol 4fl44z \
                              ya3md2 drdgjf preowc 5ubrju kyq"

    ssh $host "echo $license > license"
    ssh $host "cli -c 'request system license add license'"
}

launch_vmx()
{
    local name=$1

    echo "Launch vMX $name..."
    launch_vm $name-re
    launch_vm $name-pfe
    wait_for_host $name-re
    initialize_vmx $name
    add_license_vmx $name
}

launch_vmx_all()
{
    local name

    for name in $vmx_list; do
        launch_vmx $name
    done
}

delete_vmx()
{
    local name=$1

    echo "Delete vMX $name..."
    delete_vm $name-re
    rm -f $instance_path/$name-re-hdd.qcow2 \
            $instance_path/$name-re-usb.qcow2
    delete_vm $name-pfe
}

delete_vmx_all()
{
    for name in $vmx_list; do
        delete_vmx $name
    done
}

launch_vqfx()
{
    local name=$1

    echo "Launch vQFX $name..."
    launch_vm $name-re
    launch_vm $name-pfe
    wait_for_host $name-re
    initialize_vqfx $name
}

launch_vqfx_all()
{
    local name

    for name in $vqfx_list; do
        launch_vqfx $name
    done
}

delete_vqfx()
{
    local name=$1

    echo "Delete vQFX $name..."
    delete_vm $name-re
    delete_vm $name-pfe
}

delete_vqfx_all()
{
    for name in $vqfx_list; do
        delete_vqfx $name
    done
}

configure_vmx()
{
    local name=$(echo $1 | sed "s/-/_/g")

    echo "Configure vMX $name..."
    configure_$name
}

configure_vmx_all()
{
    local name

    for name in $vmx_list; do
        configure_vmx $name
    done
}

configure_vqfx()
{
    local name=$(echo $1 | sed "s/-/_/g")

    echo "Configure vQFX $name..."
    configure_$name
}

configure_vqfx_all()
{
    local name

    for name in $vqfx_list; do
        configure_vqfx $name
    done
}

launch_bms_all()
{
    local name

    for name in $bms_list; do
        launch_vm $name
    done
}

delete_bms_all()
{
    local name

    for name in $bms_list; do
        delete_vm $name
    done
}

update_hosts_underlay()
{
    for name in $vqfx_list; do
        update_hosts "$name-re" "add"
    done
    for name in $vmx_list; do
        update_hosts "$name-re" "add"
    done
}

build_underlay()
{
    create_underlay_link
    enable_snat
    launch_vqfx_all
    launch_vmx_all
    launch_bms_all
    configure_vqfx_all
    configure_vmx_all
    update_hosts_underlay
}

delete_underlay()
{
    delete_bms_all
    delete_vmx_all
    delete_vqfx_all
    disable_snat
    delete_underlay_link
    for name in $vqfx_list; do
        update_hosts "$name-re" "delete"
    done
    for name in $vmx_list; do
        update_hosts "$name-re" "delete"
    done
}

upload_instances_yaml()
{
    local host=$1
    local src=$2

    if [ -z "$src" ]; then src=instances.yaml; fi
    scp $cluster_path/$src $host:.
}

check_playbook_result()
{
    local rc_list
    local rc

    rc_list=$(tail -n 80 poc.log | grep -A 30 "PLAY RECAP" | \
            awk "/failed/"'{print $6}')
    for rc in $rc_list; do
        if [ "$rc" != "failed=0" ]; then return 1; fi
    done
}

copy_ssh_key()
{
    scp ~/.ssh/id_rsa ~/.ssh/id_rsa.pub ~/.ssh/config $1:/root/.ssh/
}

configure_haproxy()
{
    local dev
    local cidr

    echo "# Configure HAProxy..."
    dev=$(ip route list exact 0/0 | awk '{print $5}')
    cidr=$(ip -f inet -br addr show dev $dev | awk '{print $3}')
    IFS='/'; a=(${cidr}); unset IFS

    rm -f /etc/haproxy/haproxy.cfg 
    cp $cluster_path/haproxy.cfg /etc/haproxy/haproxy.cfg 
    sed -i -e "s/__address__/${a[0]}/" /etc/haproxy/haproxy.cfg
    systemctl restart haproxy
}

install_openstack_deployer()
{
    local host=$1

    copy_ssh_key $host
    scp cluster/builder $host:.
    scp poc.conf $host:.
    ssh $host "./builder install-deployer"
}

install_kubernetes_deployer()
{
    local host=$1

    copy_ssh_key $host
    scp cluster/builder $host:.
    scp poc.conf $host:.
    ssh $host "./builder install-deployer"
}

load_playbook()
{
    local playbook=$1
    local host=$2

    echo "Upload playbook..."
    if [ -n "$playbook" ]; then
        scp playbook/$playbook $host:./playbook.tgz
        ssh $host "tar -xzf playbook.tgz; rm -f playbook.tgz"
    fi
}

run_playbook_openstack()
{
    local host=$1

    echo "Run playbook......"
    ssh $host "./builder deploy-openstack"
    check_playbook_result
    if (( $? )); then return 1; fi
}

run_playbook_kubernetes()
{
    local host=$1

    echo "Run playbook......"
    ssh $host "./builder deploy-kubernetes"
    check_playbook_result
    if (( $? )); then return 1; fi
}

run_playbook_openshift()
{
    local host=$1

    echo "Run playbook......"
    scp $cluster_path/poc.yaml $host:./openshift-ansible/inventory/
    ssh $host sed -i \
            -e "s/__registry_username__/$registry_username/" \
            -e "s/__registry_password__/$registry_password/" \
            -e "s/__contrail_version__/$contrail_version/" \
            ./openshift-ansible/inventory/poc.yaml

    ssh $host "cd openshift-ansible; \
            ansible-playbook -i inventory/poc.yaml \
            playbooks/prerequisites.yml"
    check_playbook_result
    if (( $? )); then return 1; fi

    ssh $host "cd openshift-ansible; \
            ansible-playbook -i inventory/poc.yaml \
            playbooks/deploy_cluster.yml"
    check_playbook_result
    if (( $? )); then return 1; fi
}

configure_openstack()
{
    host=$1

    echo "Configure OpenStack on $host..."
    scp $image_path/$image_cirros $host:/etc/kolla/kolla-toolbox/
    ssh $host "docker exec -u root kolla_toolbox \
      bash -c \"source /var/lib/kolla/config_files/admin-openrc.sh; \
        openstack flavor create \
          --id 1 --disk 1 --ram 512 --vcpus 1 --public m1.tiny\""
    ssh $host "docker exec -u root kolla_toolbox \
      bash -c \"source /var/lib/kolla/config_files/admin-openrc.sh; \
        openstack image create \
          --container-format bare --disk-format qcow2 --public \
          --file /var/lib/kolla/config_files/$image_cirros cirros\""
    ssh $host "rm -f /etc/kolla/kolla-toolbox/$image_cirros"
}

install_command()
{
    local host=$1

    echo "Install Contrail Command..."
    scp poc.conf $host:.
    scp cluster/builder $host:.
    ssh $host "./builder install-command"
    scp cluster/contrail-command/command_servers.yml $host:.
}

delete_command()
{
    local host=$1

    echo "Delete Contrail Command..."
    scp cluster/builder $host:.
    scp poc.conf $host:.
    ssh $host "./builder delete-command"
}
 
update_hosts_cluster()
{
    for name in $server_list; do
        update_hosts "$name" "add"
    done
}

build_cluster()
{
    local name

    create_cluster_link
    enable_snat
    for name in $server_list; do
        launch_vm $name
        check_vm $name
        if (( $? )); then return 1; fi
    done
    for name in $server_list; do
        wait_for_host $name
    done
    launch_builder
    pre_deployment
    deploy
    if (( $? )); then return 1; fi
    post_deployment
    update_hosts_cluster
}

delete_cluster()
{
    local name

    for name in $server_list; do
        delete_vm $name
    done
    delete_builder
    disable_snat
    delete_cluster_link
    for name in $server_list; do
        update_hosts "$name" "delete"
    done
}

help()
{
    echo "$0 help"
    echo "setup-hypervisor"
    echo "build-underlay"
    echo "delete-underlay"
    echo "build-cluster"
    echo "delete-cluster"
    echo "rebuild-cluster"
    echo "create-underlay-link"
    echo "delete-underlay-link"
    echo "create-cluster-link"
    echo "delete-cluster-link"
    echo "enable-snat"
    echo "disable-snat"
    echo "launch-vm"
    echo "delete-vm"
    echo "launch-vqfx"
    echo "configure-vqfx"
    echo "delete-vqfx"
    echo "launch-vmx"
    echo "configure-vmx"
    echo "delete-vmx"
    echo "launch-bms"
    echo "delete-bms"
    echo "launch-builder"
    echo "delete-builder"
    echo "install-command"
    echo "launch-command"
    echo "delete-command"
}

test()
{
    echo "Test"
}

main()
{
    local start_date=$(date)
    local end_date

    max_size=5000000
    file_size=$(stat -c%s poc.log)
    if (( $file_size > $max_size )); then
        exec > >(tee poc.log)
    else
        exec > >(tee -a poc.log)
    fi
    exec 2>&1
    echo "==== $1 Start $start_date ===="

    case "$1" in
        test)
            test
            ;;
        setup-hypervisor)
            hv_setup
            ;;
        create-underlay-link)
            create_underlay_link
            ;;
        delete-underlay-link)
            delete_underlay_link
            ;;
        create-cluster-link)
            create_cluster_link
            ;;
        delete-cluster-link)
            delete_cluster_link
            ;;
        enable-snat)
            enable_snat
            ;;
        disable-snat)
            disable_snat
            ;;
        launch-vm)
            shift
            launch_vm "$@"
            ;;
        delete-vm)
            shift
            delete_vm "$@"
            ;;
        launch-vmx)
            shift
            if [ $1 ]; then
                launch_vmx "$@"
            else
                launch_vmx_all
            fi
            ;;
        configure-vmx)
            shift
            if [ $1 ]; then
                configure_vmx "$@"
            else
                configure_vmx_all
            fi
            ;;
        delete-vmx)
            shift
            if [ $1 ]; then
                delete_vmx "$@"
            else
                delete_vmx_all
            fi
            ;;
        launch-vqfx)
            shift
            if [ $1 ]; then
                launch_vqfx "$@"
            else
                launch_vqfx_all
            fi
            ;;
        configure-vqfx)
            shift
            if [ $1 ]; then
                configure_vqfx "$@"
            else
                configure_vqfx_all
            fi
            ;;
        delete-vqfx)
            shift
            if [ $1 ]; then
                delete_vqfx "$@"
            else
                delete_vqfx_all
            fi
            ;;
        launch-bms)
            shift
            if [ $1 ]; then
                launch_vm "$@"
            else
                launch_bms_all
            fi
            ;;
        delete-bms)
            shift
            if [ $1 ]; then
                delete_vm "$@"
            else
                delete_bms_all
            fi
            ;;
        launch-builder)
            launch_builder
            ;;
        delete-builder)
            delete_builder
            ;;
        build-underlay)
            build_underlay
            ;;
        delete-underlay)
            delete_underlay
            ;;
        build-cluster)
            build_cluster
            ;;
        delete-cluster)
            delete_cluster
            ;;
        rebuild-cluster)
            delete_cluster
            build_cluster
            ;;
        install-command)
            shift
            install_command "$@"
            ;;
        launch-command)
            shift
            launch_command "$@"
            ;;
        delete-command)
            shift
            delete_command "$@"
            ;;
        launch-appformix)
            shift
            launch_appformix "$@"
            ;;
        rebuild-fabric)
            rebuild_fabric
            ;;
        configure-poc)
            configure_poc
            ;;
        configure-openstack)
            shift
            configure_openstack "$@"
            ;;
        deploy)
            deploy
            ;;
        post-deployment)
            post_deployment
            ;;
        *)
            help
            ;;
    esac

    rc=$?
    echo "==== $1 Start $start_date ===="
    echo "==== $1 End   $(date) ===="
    if (( $rc )); then
        echo "==== FAILED! ===="
    else
        echo "==== SUCCEEDED! ===="
    fi
}

main "$@"
exit 0

