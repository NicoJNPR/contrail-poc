
cluster_path=cluster/cfm

cluster_br_list="br-int br-r1"

server_list="contrail openstack csn compute"

vm_cpu[contrail]=4
vm_ram[contrail]=65535
vm_disk[contrail]=100G
vm_os[contrail]=centos
vm_image_type[contrail]=volume
vm_address_list[contrail]="10.6.8.1        10.6.11.1"
vm_netmask_list[contrail]="255.255.255.0   255.255.255.0"
vm_gateway_list[contrail]="10.6.8.254      null"
vm_nic_list[contrail]="br=br-int br=br-r1"

vm_cpu[openstack]=4
vm_ram[openstack]=65535
vm_disk[openstack]=100G
vm_os[openstack]=centos
vm_image_type[openstack]=volume
vm_address_list[openstack]="10.6.8.2        10.6.11.2"
vm_netmask_list[openstack]="255.255.255.0   255.255.255.0"
vm_gateway_list[openstack]="10.6.8.254      null"
vm_nic_list[openstack]="br=br-int br=br-r1"

vm_cpu[csn]=1
vm_ram[csn]=16384
vm_disk[csn]=80G
vm_os[csn]=centos
vm_image_type[csn]=volume
vm_address_list[csn]="10.6.8.3        10.6.11.3"
vm_netmask_list[csn]="255.255.255.0   255.255.255.0"
vm_gateway_list[csn]="10.6.8.254      null"
vm_nic_list[csn]="br=br-int br=br-r1"

vm_cpu[compute]=4
vm_ram[compute]=32768
vm_disk[compute]=80G
vm_os[compute]=centos
vm_image_type[compute]=volume
vm_address_list[compute]="10.6.8.4        10.6.11.4"
vm_netmask_list[compute]="255.255.255.0   255.255.255.0"
vm_gateway_list[compute]="10.6.8.254      null"
vm_nic_list[compute]="br=br-int br=br-r1"
vm_spec_arg[compute]="--cpu host"

vm_cpu[command]=2
vm_ram[command]=32768
vm_disk[command]=100G
vm_os[command]=centos
vm_image_type[command]=volume
vm_address_list[command]="10.6.8.10       10.6.11.10"
vm_netmask_list[command]="255.255.255.0   255.255.255.0"
vm_gateway_list[command]="10.6.8.254      null"
vm_nic_list[command]="br=br-int br=br-r1"


launch_builder()
{
    local arr=(${vm_address_list[command]})
    local host=${arr[0]}

    echo "Launch builder..."
    launch_vm "command"
    wait_for_host "command"

    copy_ssh_key $host
    ssh $host yum install -y ansible git
}

delete_builder()
{
    echo "Delete builder..."
    delete_vm "command"
}


pre_deployment()
{
    echo "Pre-Deployment"
}

deploy()
{
    local arr=(${vm_address_list[command]})
    local host=${arr[0]}

    load_playbook $contrail_playbook $host
    run_playbook_openstack $host
}

patch_nova_compute()
{
    local arr=(${vm_address_list[compute]})
    local host=${arr[0]}

    ssh $host "sed -i '/\[libvirt\]/ a\cpu_mode=none' \
      /etc/kolla/nova-compute/nova.conf"
    ssh $host "sed -i '/\[libvirt\]/ a\virt_type=qemu'\
      /etc/kolla/nova-compute/nova.conf"
    ssh $host "docker restart nova_compute"
}

patch_fabric_playbook()
{
    local arr=(${vm_address_list[contrail]})
    local host=${arr[0]}
    local list=$(cat playbook.patch | awk "/\+\+\+/"'{print $2}')
    local file
    local name

    ssh $host "yum install -y patch"
    scp playbook.patch $host:./
    for file in $list; do
        ssh $host "docker cp config_api_1:$file ./"
    done
    ssh $host "patch < playbook.patch"
    for file in $list; do
        name=$(echo $file | awk -F / '{print $8}')
        ssh $host "docker cp $name config_api_1:$file"
    done
}

setup_openstack()
{
    local arr=(${vm_address_list[openstack]})
    local host=${arr[0]}

    scp $image_path/$image_cirros $host:/etc/kolla/kolla-toolbox/
    ssh $host "docker exec kolla_toolbox \
      bash -c \"source /var/lib/kolla/config_files/admin-openrc.sh; \
        openstack flavor create \
          --id 1 --disk 1 --ram 512 --vcpus 1 --public m1.tiny\""
    ssh $host "docker exec kolla_toolbox \
      bash -c \"source /var/lib/kolla/config_files/admin-openrc.sh; \
        openstack image create \
          --container-format bare --disk-format qcow2 --public \
          --file /var/lib/kolla/config_files/$image_cirros cirros\""
    ssh $host "rm -f /etc/kolla/kolla-toolbox/$image_cirros"
}

configure_poc()
{
    local arr=(${vm_address_list[controller]})
    local host=${arr[0]}

    scp $image_path/$image_cirros $host:/etc/kolla/kolla-toolbox/
    scp bms-enroll.initrd $host:/etc/kolla/kolla-toolbox/
    scp bms-enroll.vmlinuz $host:/etc/kolla/kolla-toolbox/
    scp bms.initrd $host:/etc/kolla/kolla-toolbox/
    scp bms.vmlinuz $host:/etc/kolla/kolla-toolbox/
    scp bms.qcow2 $host:/etc/kolla/kolla-toolbox/
    scp configure-poc $host:/etc/kolla/kolla-toolbox/
    ssh $host "docker exec kolla_toolbox \
      /var/lib/kolla/config_files/configure-poc"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/$image_cirros"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/bms-enroll.vmlinuz"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/bms-enroll.initrd"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/bms.vmlinuz"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/bms.initrd"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/bms.qcow2"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/configure-poc"
}

add_static_route()
{
    local arr
    local host
    local name

    for name in $server_list; do
        arr=(${vm_address_list[$name]})
        host=${arr[0]}
        ssh $host ip route add 10.6.0.0/24 via 10.6.11.254
    done
}

post_deployment()
{
    local arr

    echo "Post-Deployment"
    configure_haproxy
    setup_openstack
    #configure_poc
    add_static_route
    arr=(${vm_address_list[command]})
    install_command ${arr[0]}
    launch_command ${arr[0]} command_servers.yml instances.yaml
}

