
cluster_path=cluster/cfm

cluster_br_list="br-int br-r1"

server_list="contrail-1 openstack-1 csn-1 compute-1"


launch_builder()
{
    local arr=(${vm_address_list[contrail]})
    local host=${arr[0]}

    echo "Launch builder..."
    #copy_ssh_key $host
    #ssh $host yum install -y ansible git
    install_openstack_deployer $host
}

delete_builder()
{
    echo "Delete builder..."
}


pre_deployment()
{
    echo "Pre-Deployment"
}

deploy()
{
    local arr=(${vm_address_list[contrail]})
    local host=${arr[0]}

    upload_instances_yaml $host
    if [ -n "$contrail_playbook" ]; then
        load_playbook $contrail_playbook $host
    fi
    run_playbook_openstack $host
}

patch_nova_compute()
{
    local arr=(${vm_address_list[compute]})
    local host=${arr[0]}

    ssh $host "sed -i '/\[libvirt\]/ a\cpu_mode=none' \
      /etc/kolla/nova-compute/nova.conf"
    ssh $host "sed -i '/\[libvirt\]/ a\virt_type=qemu'\
      /etc/kolla/nova-compute/nova.conf"
    ssh $host "docker restart nova_compute"
}

patch_fabric_playbook()
{
    local arr=(${vm_address_list[contrail]})
    local host=${arr[0]}
    local list=$(cat playbook.patch | awk "/\+\+\+/"'{print $2}')
    local file
    local name

    ssh $host "yum install -y patch"
    scp playbook.patch $host:./
    for file in $list; do
        ssh $host "docker cp config_api_1:$file ./"
    done
    ssh $host "patch < playbook.patch"
    for file in $list; do
        name=$(echo $file | awk -F / '{print $8}')
        ssh $host "docker cp $name config_api_1:$file"
    done
}

setup_openstack()
{
    local arr=(${vm_address_list[openstack]})
    local host=${arr[0]}

    scp $image_path/$image_cirros $host:/etc/kolla/kolla-toolbox/
    ssh $host "docker exec kolla_toolbox \
      bash -c \"source /var/lib/kolla/config_files/admin-openrc.sh; \
        openstack flavor create \
          --id 1 --disk 1 --ram 512 --vcpus 1 --public m1.tiny\""
    ssh $host "docker exec kolla_toolbox \
      bash -c \"source /var/lib/kolla/config_files/admin-openrc.sh; \
        openstack image create \
          --container-format bare --disk-format qcow2 --public \
          --file /var/lib/kolla/config_files/$image_cirros cirros\""
    ssh $host "rm -f /etc/kolla/kolla-toolbox/$image_cirros"
}

configure_poc()
{
    local arr=(${vm_address_list[controller]})
    local host=${arr[0]}

    scp $image_path/$image_cirros $host:/etc/kolla/kolla-toolbox/
    scp bms-enroll.initrd $host:/etc/kolla/kolla-toolbox/
    scp bms-enroll.vmlinuz $host:/etc/kolla/kolla-toolbox/
    scp bms.initrd $host:/etc/kolla/kolla-toolbox/
    scp bms.vmlinuz $host:/etc/kolla/kolla-toolbox/
    scp bms.qcow2 $host:/etc/kolla/kolla-toolbox/
    scp configure-poc $host:/etc/kolla/kolla-toolbox/
    ssh $host "docker exec kolla_toolbox \
      /var/lib/kolla/config_files/configure-poc"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/$image_cirros"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/bms-enroll.vmlinuz"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/bms-enroll.initrd"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/bms.vmlinuz"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/bms.initrd"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/bms.qcow2"
    ssh $host "rm -f /etc/kolla/kolla-toolbox/configure-poc"
}

add_static_route()
{
    local arr
    local host
    local name

    for name in $server_list; do
        arr=(${vm_address_list[$name]})
        host=${arr[0]}
        ssh $host ip route add 10.6.0.0/24 via 10.6.11.254
    done
}

post_deployment()
{
    local arr

    echo "Post-Deployment"
    configure_haproxy
    setup_openstack
    #configure_poc
    add_static_route
    arr=(${vm_address_list[contrail]})
    install_command ${arr[0]}
    launch_command ${arr[0]} instances.yaml
}

