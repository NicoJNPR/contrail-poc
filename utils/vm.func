
vm_disk_arg=""
vm_disk_img=""
vm_net_arg=""
vm_os_arg=""


wait_for_host()
{
    local arr=(${vm_address_list[$1]})
    local host=${arr[0]}
    local password=$2

    echo "Wait for $host up..."
    while [ 1 ]; do
        ping -c 1 -W 10 $host > /dev/null
        if [ $? == 0 ]; then
            echo "$host is running."
            break
        else
            echo "Wait for $host up..."
            sleep 10
        fi
    done
    echo "Wait for $host SSH..."
    while [ 1 ]; do
        if [ "$password" ]; then
            sshpass -p $password ssh $host "echo check" > /dev/null
        else
            ssh -q $host "echo check" > /dev/null
        fi
        if [ $? == 0 ]; then
            echo "$host SSH is ready."
            break
        else
            echo "Wait for $host SSH..."
            sleep 10
        fi
    done
}

create_vm_config_common()
{
    local name=$1
    local arr=(${vm_address_list[$1]})
    local host=${arr[0]}

    cat << __EOF__ > hosts
127.0.0.1 localhost.poc localhost
$host  $name.poc  $name
__EOF__

    cat << __EOF__ > ntp.conf
driftfile /var/lib/ntp/drift
server 10.6.8.254
restrict 127.0.0.1
restrict -6 ::1
includefile /etc/ntp/crypto/pw
keys /etc/ntp/keys
__EOF__

    cp /root/.ssh/id_rsa.pub authorized_keys
}

create_vm_config_centos()
{
    local name=$1
    local count

    create_vm_config_common $name

    count=0
    for address in ${vm_address_list[$name]}; do
        arr=(${vm_netmask_list[$name]})
        netmask=${arr[$count]}
        arr=(${vm_gateway_list[$name]})
        gateway=${arr[$count]}
        cat << __EOF__ > ifcfg-eth$count
DEVICE=eth$count
TYPE=Ethernet
BOOTPROTO=static
ONBOOT=yes
IPADDR=$address
NETMASK=$netmask
__EOF__

        if [ $gateway != "null" ]; then
            cat << __EOF__ >> ifcfg-eth$count
GATEWAY=$gateway
DNS1=10.6.8.254
DOMAIN="poc"
__EOF__
        fi
        count=$((count + 1))
    done
}

create_vm_config_ubuntu()
{
    echo ""
}

create_vm_config_rhel()
{
    echo ""
}

clean_vm_config()
{
    rm -f hosts
    rm -f ntp.conf
    rm -f authorized_keys
    rm -f ifcfg-eth*
    rm -f interfaces
}

customize_vm_centos()
{
    local name=$1
    local upload_arg=""

    count=0
    for address in ${vm_address_list[$name]}; do
        upload_arg+="--upload ifcfg-eth$count:/etc/sysconfig/network-scripts "
        count=$((count + 1))
    done

    create_vm_config_centos $name
    virt-customize \
        -a $vm_disk_img \
        --hostname $name \
        --root-password password:c0ntrail123 \
        --upload hosts:/etc \
        --run-command 'sed -i "s/#UseDNS yes/UseDNS no/g" /etc/ssh/sshd_config' \
        --run-command 'mkdir -p /root/.ssh' \
        --upload authorized_keys:/root/.ssh \
        --run-command 'chmod 600 /root/.ssh/authorized_keys' \
        $upload_arg \
        --run-command 'yum remove -y cloud-init' \
        --run-command 'systemctl disable chronyd' \
        --install 'ntp' \
        --upload ntp.conf:/etc \
        --run-command 'systemctl enable ntpd' \
        --selinux-relabel
    clean_vm_config
}

customize_vm_ubuntu()
{
    echo ""
}

customize_vm_rhel()
{
    echo ""
}

create_vm_image()
{
    local name=$1
    local role_arg=(${role[$2]})

    vm_disk_img=$instance_path/$name.qcow2
    if [ ${vm_disk_bus[$name]} ]; then
        vm_disk_arg="--disk \
          path=$vm_disk_img,format=qcow2,bus=${vm_disk_bus[$name]}"
    else
        vm_disk_arg="--disk path=$vm_disk_img,format=qcow2,bus=virtio"
    fi
    qemu-img create -f qcow2 -o preallocation=metadata \
      $vm_disk_img "${role_arg[2]}"G
}

build_vm_image_on_file()
{
    local name=$1
    local src_img=$2
    local size=$3

    echo "Build image on file..."
    vm_disk_img=$instance_path/$name.qcow2
    vm_disk_arg="--disk path=$vm_disk_img,format=qcow2"
    if (( $size > 0 )); then
        qemu-img create -f qcow2 -o preallocation=metadata \
          $vm_disk_img "$size"G
        virt-resize --expand /dev/sda1 $src_img $vm_disk_img
    else
        cp $src_img $vm_disk_img
    fi
}

build_vm_image_on_volume()
{
    local name=$1
    local src_img=$2
    local size=$3

    echo "Build image on volume..."
    vm_disk_img=/dev/$volume_pool/$name
    vm_disk_arg="--disk bus=virtio,vol=$volume_pool/$name,cache=none"
    virsh vol-create-as $volume_pool $name "$size"G
    virt-resize --expand /dev/sda1 $src_img $vm_disk_img
}

build_vm_image()
{
    local name=$1
    local src_img=$2
    local role_arg=(${role[$3]})

    echo "Build image, type: ${role_arg[3]}, size: ${role_arg[2]}"
    if [ ${role_arg[3]} == "volume" ]; then
        # Volume is only supported by CentOS, Ubuntu and RHEL,
        # disk size is mandatory.
        pool_state=$(virsh pool-info $volume_pool 2> /dev/null | \
                awk "/State/"'{print $2 }')
        if [ "$pool_state" ==  "running" ]; then
            # Pool is available.
            build_vm_image_on_volume $name $src_img ${role_arg[2]}
        else
            # Pool is not available.
            build_vm_image_on_file $name $src_img ${role_arg[2]}
        fi
    else
        # File is supported by all OS,
        # but disk size is only supported by CentOS, Ubuntu and RHEL.
        build_vm_image_on_file $name $src_img ${role_arg[2]}
    fi
}

build_vmx_re_image()
{
    local name=$1

    cp $image_path/$image_vmx_re $instance_path/$name.qcow2
    cp $image_path/$image_vmx_re_hdd $instance_path/$name-hdd.qcow2
    cp $image_path/$image_vmx_re_usb $instance_path/$name-usb.qcow2
    vm_disk_arg=" \
      --disk path=$instance_path/$name.qcow2,format=qcow2,bus=virtio \
      --disk path=$instance_path/$name-hdd.qcow2,bus=virtio \
      --disk path=$instance_path/$name-usb.qcow2,bus=virtio"
}

build_vm_net_arg()
{
    local name=$1
    local model=virtio
    local n

    if [ "${vm_nic_model[$name]}" ]; then
        model=${vm_nic_model[$name]}
    fi

    if [ "${vm_nic_list[$name]}" ]; then
        vm_net_arg=""
        for n in ${vm_nic_list[$name]}; do
            IFS='='; a=(${n}); unset IFS
            key=${a[0]}
            val=${a[1]}
            if [ $key == "br" ]; then
                vm_net_arg+="--network bridge=$val,model=$model "
            elif [ $key == "dir" ]; then
                vm_net_arg+="--network type=direct,source=$val,"
                vm_net_arg+="source_mode=passthrough,model=$model "
            fi
        done
    fi
}

build_vm_args()
{
    local name=$1
    local role_arg=(${role[$2]})
    local virt_args

    build_vm_net_arg $name
    virt_args="--connect qemu:///system --virt-type kvm "
    virt_args+="--name $name --vcpus ${role_arg[0]} "
    virt_args+="--ram $((${role_arg[1]} * 1024)) "
    virt_args+="$vm_os_arg $vm_disk_arg $vm_net_arg "
    virt_args+="--graphics vnc,listen=0.0.0.0 --noautoconsole --boot hd "
    if [ "${vm_spec_arg[$name]}" ]; then
        virt_args+=${vm_spec_arg[$name]}
    fi
    echo $virt_args
}

define_vm()
{
    local name=$1
    local role_name=$2
    local virt_args

    virt_args=$(build_vm_args $name $role_name)
    virsh define /dev/stdin << __EOT__
$(virt-install $virt_args --print-xml)
__EOT__
}

create_vm()
{
    local name=$1
    local role_name=$2
    local virt_args

    virt_args=$(build_vm_args $name $role_name)
    virt-install $virt_args
}

launch_vm()
{
    local name=$1
    local dst_img
    local np=""
    local br

    virsh domstate $name > /dev/null 2>&1
    if (( $? == 0 )); then
        echo "VM $name exists."
        return 0
    fi
    role_name=${vm_role[$name]}
    echo "Launch $name with role $role_name..."
    case "$role_name" in
        contrail | openstack | csn | compute | master)
            vm_os_arg="--os-variant centos7.0"
            build_vm_image $name $image_path/$image_centos $role_name
            customize_vm_centos $name
            create_vm $name $role_name
        ;;
        centos )
            vm_os_arg="--os-variant centos7.0"
            build_vm_image $name $image_path/$image_centos $role_name
            customize_vm_centos $name
            create_vm $name $role_name
        ;;
        ubuntu )
            build_vm_image $name $image_path/$image_ubuntu $role_name
            customize_vm_ubuntu $name
            create_vm $name $role_name
        ;;
        rhel)
            build_vm_image $name $image_path/$image_rhel $role_name
            customize_vm_rhel $name
            create_vm $name $role_name
        ;;
        cirros )
            vm_os_arg="--os-variant none"
            build_vm_image $name $image_path/$image_cirros $role_name
            create_vm $name $role_name
        ;;
        bms )
            create_vm_image $name $role_name
            define_vm $name $role_name
        ;;
        vqfx-re )
            vm_os_arg="--os-variant none"
            build_vm_image $name $image_path/$image_vqfx_re $role_name
            define_vm $name $role_name
            build_dhcp_conf
            virsh start $name
        ;;
        vqfx-pfe )
            vm_os_arg="--os-variant none"
            build_vm_image $name $image_path/$image_vqfx_pfe $role_name
            create_vm $name $role_name
        ;;
        vmx-re )
            vm_os_arg="--os-variant none"
            build_vmx_re_image $name $role_name
            define_vm $name $role_name
            build_dhcp_conf
            virsh start $name
        ;;
        vmx-pfe )
            vm_os_arg="--os-variant none"
            build_vm_image $name $image_path/$image_vmx_pfe $role_name
            create_vm $name $role_name
        ;;
        * )
            echo "ERROR: Role $role_name is not supported!"
            return 1
        ;;
    esac
}

check_vm()
{
    local name=$1

    echo "Check VM $name..."
    virsh domstate $1 > /dev/null 2>&1
    return $?
}

delete_vm()
{
    local name=$1
    local role_name=${vm_role[$name]}
    local role_arg=(${role[$role_name]})

    echo "Delete VM $name..."
    virsh domstate $name > /dev/null 2>&1
    if (( $? == 0 )); then
        virsh destroy $name
        virsh undefine $name
    fi
    if [ ${role_arg[3]} == "volume" ]; then
        virsh vol-list $volume_pool | grep $name > /dev/null 2>&1
        if (( $? == 0 )); then
            virsh vol-delete $name $volume_pool
        fi
    else
        rm -f $instance_path/$name.qcow2

    fi
}

