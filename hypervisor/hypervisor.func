
hv_get_os()
{
    cat /etc/os-release | awk -F \" "/^NAME/"'{print $2}'
}

host_os=$(hv_get_os)

hv_install_packages_centos()
{
    echo "# Install CentOS packages..."
    yum install -y bridge-utils qemu-kvm libvirt virt-install \
            libguestfs-tools libguestfs-xfs \
            haproxy sshpass dhcp bind bind-utils ntp
    systemctl enable libvirtd
    systemctl start libvirtd
}

hv_install_packages_ubuntu()
{
    echo "# Install Ubuntu packages..."
    apt-get install -y bridge-utils qemu-kvm libvirt-bin virtinst \
            libguestfs-tools \
            haproxy sshpass isc-dhcp-server bind9 ntp
}

hv_configure_libvirt()
{
    echo "# Configure libvirt..."
    virsh net-info default > /dev/null 2>&1
    if (( $? == 0 )); then
        virsh net-destroy default
        virsh net-undefine default
    fi
}

hv_configure_named()
{
    local svc=$1
    local server_list
    local server
    local forwarders=""

    echo "# Configure named..."
    server_list=$(cat /etc/resolv.conf | awk "/nameserver/"'{ print $2 }')
    for server in $server_list; do
        forwarders+="$server; "
    done
    cat << __EOF__ > /etc/named.conf
options {
        listen-on port 53 { 10.6.8.254; };
        allow-query { 10.6.8.0/24; };
        recursion yes;
        forwarders { $forwarders};
        forward only;
        dnssec-enable yes;
        dnssec-validation yes;
};
__EOF__
    systemctl enable $svc
    systemctl restart $svc
}

hv_configure_ntp()
{
    local svc=$1

    echo "# Configure ntpd..."
    if [ $ntp_server ]; then
        cat << __EOF__ > /etc/ntp.conf
driftfile /var/lib/ntp/drift
server $ntp_server  iburst
restrict 0.0.0.0
__EOF__
    else
        cat << __EOF__ > /etc/ntp.conf
server 127.127.1.0
fudge 127.127.1.0 stratum 8
restrict 0.0.0.0
__EOF__
    fi
    systemctl enable $svc
    systemctl restart $svc
}

hv_configure_haproxy()
{
    local dev
    local cidr

    echo "# Configure HAProxy..."
    dev=$(ip route list exact 0/0 | awk '{print $5}')
    cidr=$(ip -f inet -br addr show dev $dev | awk '{print $3}')
    IFS='/'; a=(${cidr}); unset IFS

    rm -f /etc/haproxy/haproxy.cfg 
    cp hypervisor/haproxy.cfg /etc/haproxy/haproxy.cfg 
    sed -i -e "s/__address__/${a[0]}/" /etc/haproxy/haproxy.cfg
    systemctl enable haproxy
    systemctl restart haproxy
}

hv_enable_nested_virt()
{
    echo "# Enable nested virtualization..."
    cat << __EOF__ > /etc/modprobe.d/kvm-nested.conf
options kvm-intel nested=1
options kvm-intel enable_shadow_vmcs=1
options kvm-intel enable_apicv=1
options kvm-intel ept=1
__EOF__

    modprobe -r kvm_intel
    modprobe -a kvm_intel
}

hv_generate_ssh_key()
{
    echo "# Generate SSH key..."
    #ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -N "" -C contrail-poc
    mkdir -p ~/.ssh
    cp hypervisor/id_rsa ~/.ssh/
    cp hypervisor/id_rsa.pub ~/.ssh/
    cp hypervisor/config ~/.ssh/
    chmod 600 ~/.ssh/id_rsa
    chmod 600 ~/.ssh/id_rsa.pub
}

hv_create_volume_pool()
{
    if [ -z $volume_dev ]; then
        return 0
    fi
    echo "Create volume pool on device $volume_dev..."
    virsh pool-info lv > /dev/null 2>&1
    if (( $? == 0 )); then
        return 0
    fi
    virsh pool-define-as --name lv --type logical --source-dev $volume_dev
    virsh pool-build lv
    virsh pool-start lv
    virsh pool-autostart lv
}

hv_enable_ipv4_forward()
{
    local r

    echo "# Enable IPv4 forwarding..."
    r=$(cat /proc/sys/net/ipv4/ip_forward)
    if [ $r == "0" ]; then
        echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
        sysctl -p /etc/sysctl.conf
    fi
}

hv_setup_centos()
{
    hv_install_packages_centos
    hv_configure_libvirt
    hv_configure_named named
    hv_configure_ntp ntpd
    mkdir -p /var/lib/libvirt/instance
    hv_enable_nested_virt
    hv_create_volume_pool
    hv_generate_ssh_key
    hv_enable_ipv4_forward
    systemctl stop firewalld
    systemctl disable firewalld
}

hv_setup_ubuntu()
{
    hv_install_packages_ubuntu
    hv_configure_libvirt
    hv_configure_named bind9
    hv_configure_ntp ntp
    mkdir -p /var/lib/libvirt/instance
    hv_enable_nested_virt
    hv_create_volume_pool
    hv_generate_ssh_key
    hv_enable_ipv4_forward
    #systemctl stop ufw
    #systemctl disable ufw
}

hv_setup()
{
    if [ "$host_os" == "CentOS Linux" ]; then
        hv_setup_centos
    elif [ "$host_os" == "Ubuntu" ]; then
        hv_setup_ubuntu
    else
        echo "ERROR: OS \"$host_os\" is not supported!"
    fi
}

